/* eslint-disable prettier/prettier */
/**
 * @file
 * Laravel Mix Configuration
 */

/**
 * Imports
 */
const cssNano             = require('cssnano')({
  preset                  : ['default', {
    autoprefixer           : false,
    normalizeWhitespace   : false,
    minifySelectors       : false,
    minifyParams          : false,
    normalizeCharset      : false
  }]
});
const customEvent         = require('custom-event-polyfill');
const customProperties    = require('postcss-custom-properties');
const mix                 = require('laravel-mix');
const MixGlob             = require('laravel-mix-glob');
const StyleLintPlugin     = require('stylelint-webpack-plugin');
require('laravel-mix-eslint');

/**
 * Settings
 */
const mixGlob = new MixGlob({ mix });
const browserSync = {
  proxy           : 'http://projectname.test/',
  https           : false,
  autoOpen        : false,
  browsers        : [
    'Google Chrome',
  ]
};

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for your application, as well as bundling up your JS files.
 |
 */

mixGlob
  .sass('src/sass/fontface*.scss', 'css/')
  .sass('src/sass/3.base/*.scss', 'css/base/')
  .sass('src/sass/4.objects/*.scss', 'css/layout/')
  .sass('src/sass/5.components/*.scss', 'css/components/')
  .sass('src/sass/6.utilities/*.scss', 'css/utilities/')
  .sass('src/sass/7.pages/*.scss', 'css/pages/')
  .mix('options')({
    processCssUrls: false,
    postCss: [
      customProperties,
      cssNano
    ],
  });

mix
  .copyDirectory(
    'src/js/vendors',
    'js/tools'
  )
  // .babel(
  //   'src/js/base/base.global.js',
  //   'js/base/base.global.js'
  // )
  .babel(
    'src/js/tools/tools.announce.js',
    'js/tools/tools.announce.js'
  )
  .copy(
    'src/js/tools/tools.webfontloading.js',
    'js/tools/tools.webfontloading.js'
  )
  .babel(
    'src/js/components/components.horizontal-tabs.js',
    'js/components/components.horizontal-tabs.js'
  )
  .babel(
    'src/js/components/components.messages.js',
    'js/components/components.messages.js'
  )
  .babel(
    'src/js/components/components.navigation.js',
    'js/components/components.navigation.js'
  )
  .babel(
    'src/js/components/components.tabs.js',
    'js/components/components.tabs.js'
  )
  .babel(
    'src/js/components/components.vertical-tabs.js',
    'js/components/components.vertical-tabs.js'
  )
  .eslint({
    fix: false,
    cache: false,
  })
  .sourceMaps()
  .webpackConfig({
    watchOptions: {
      ignored: /node_modules/,
    },
    plugins: [
      new StyleLintPlugin({
        configFile: './.stylelintrc.json',
      }),
    ],
  })
  .browserSync({
    proxy: browserSync.proxy,
    https: browserSync.https,
    open: browserSync.autoOpen,
    browser: browserSync.browsers,
    files: [
      './css/**/*',
      './js/**/*',
      './templates/**/*',
      './*.yml',
      './*.theme',
    ],
    watchEvents: ['add', 'change'],
  });

if (!mix.inProduction()) {
  mix.webpackConfig({ devtool: 'source-map' });
}

if (mix.config.inProduction) {
  mix.version();
}

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
