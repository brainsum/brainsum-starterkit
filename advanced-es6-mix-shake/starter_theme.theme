<?php

/**
 * @file
 * Functions to support theming in the BRAINSUM's Drupal 8-9 startertheme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function starter_theme_preprocess_html(&$variables) {
  $path = \Drupal::request()->getPathInfo();
  $path_args = explode('/', $path);
  // store theme's path in a variable to access it from any Twig templates.
  $variables['starter_theme_path'] = drupal_get_path('theme', 'starter_theme');

  $variables['path_info']['args'] = FALSE;

  if (count($path_args) >= 3) {
    $variables['path_info']['args'] = Html::cleanCssIdentifier(ltrim($path, '/'));
  }

  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['attributes']['class'][] = 'page-node-' . $node->id();
  }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 *
 * @param array $suggestions
 *      Existing suggestions
 * @param array $variables
 *      Element variables
 */
function starter_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof \Drupal\node\NodeInterface) {
    $suggestions[] = 'page__' . $node->bundle();
    $suggestions[] = 'page__node_' . $node->bundle();
  }
}

/**
 * Implements hook_preprocess_page() for PAGE document templates.
 */
function starter_theme_preprocess_page(array &$variables) {
  if ($variables['logged_in'] == TRUE) {
    $variables['#attached']['library'][] = 'starter_theme/admin.toolbar';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block().
 */
function starter_theme_theme_suggestions_block_alter(&$suggestions, array $variables) {
  if (!empty($variables['elements']['#id'])) {

    /** @var \Drupal\block\BlockInterface $block */
    $block = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['elements']['#id']);
    if ($block) {

      // Add region-specific block theme suggestions.
      $region = $block
        ->getRegion();

      $suggestions[] = 'block__' . $region;
      $suggestions[] = 'block__' . $region . '__' . $variables['elements']['#plugin_id'];
      $suggestions[] = 'block__' . $region . '__' . $variables['elements']['#id'];
    }
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function starter_theme_preprocess_form_element(&$variables) {
  if (!empty($variables['element']['#type']) && ($variables['element']['#type'] === 'radio' || $variables['element']['#type'] === 'checkbox')) {
    $variables['attributes']['class'][] = 'form-type--boolean';
  }

  if (!empty($variables['description']['attributes'])) {
    $variables['description']['attributes']->addClass('form-item__description');
  }

  if ($variables['disabled']) {
    $variables['label']['#attributes']['class'][] = 'is-disabled';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function starter_theme_preprocess_form_element_label(&$variables) {
  $variables['attributes']['class'][] = 'form-item__label';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function starter_theme_preprocess_input(&$variables) {
  if (
    !empty($variables['element']['#title_display']) &&
    $variables['element']['#title_display'] === 'attribute' &&
    !empty((string) $variables['element']['#title'])
  ) {
    $variables['attributes']['title'] = (string) $variables['element']['#title'];
  }

  $type_api = $variables['element']['#type'];
  $type_html = $variables['attributes']['type'];
  $text_types_html = [
    'text',
    'email',
    'tel',
    'number',
    'search',
    'password',
    'date',
    'time',
    'file',
    'color',
    'datetime-local',
    'url',
    'month',
    'week',
  ];

  if (in_array($type_html, $text_types_html)) {
    $variables['attributes']['class'][] = 'form-element';
    $variables['attributes']['class'][] = Html::getClass('form-element--type-' . $type_html);
    $variables['attributes']['class'][] = Html::getClass('form-element--api-' . $type_api);

    if (!empty($variables['element']['#autocomplete_route_name'])) {
      $variables['autocomplete_message'] = t('Loadingâ€¦');
    }
  }

  if (in_array($type_html, ['checkbox', 'radio'])) {
    $variables['attributes']['class'][] = 'form-boolean';
    $variables['attributes']['class'][] = Html::getClass('form-boolean--type-' . $type_html);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function starter_theme_preprocess_textarea(&$variables) {
  $variables['attributes']['class'][] = 'form-element';
  $variables['attributes']['class'][] = 'form-element--type-textarea';
  $variables['attributes']['class'][] = 'form-element--api-textarea';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function starter_theme_preprocess_select(&$variables) {
  $variables['attributes']['class'][] = 'form-element';
  $variables['attributes']['class'][] = $variables['element']['#multiple'] ?
    'form-element--type-select-multiple' :
    'form-element--type-select';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function starter_theme_preprocess_checkboxes(&$variables) {
  $variables['attributes']['class'][] = 'form-boolean-group';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function starter_theme_preprocess_radios(&$variables) {
  $variables['attributes']['class'][] = 'form-boolean-group';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function starter_theme_preprocess_field(&$variables) {
  $rich_field_types = ['text_with_summary', 'text', 'text_long'];

  if (in_array($variables['field_type'], $rich_field_types)) {
    $variables['attributes']['class'][] = 'text-content';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function starter_theme_preprocess_field_multiple_value_form(&$variables) {
  // Make disabled available for the template.
  $variables['disabled'] = !empty($variables['element']['#disabled']);

  if ($variables['multiple']) {
    // Add an additional CSS class for the field label table cell.
    // This repeats the logic of template_preprocess_field_multiple_value_form()
    // without using '#prefix' and '#suffix' for the wrapper element.
    //
    // If the field is multiple, we don't have to check the existence of the
    // table header cell.
    //
    // @see template_preprocess_field_multiple_value_form().
    $header_attributes = ['class' => ['form-item__label', 'form-item__label--multiple-value-form']];
    if (!empty($variables['element']['#required'])) {
      $header_attributes['class'][] = 'js-form-required';
      $header_attributes['class'][] = 'form-required';
    }
    // Using array_key_first() for addressing the first header cell would be
    // more elegant here, but we can rely on the related theme.inc preprocess.
    $variables['table']['#header'][0]['data'] = [
      '#type' => 'html_tag',
      '#tag' => 'h4',
      '#value' => $variables['element']['#title'],
      '#attributes' => $header_attributes,
    ];

    if ($variables['disabled']) {
      $variables['table']['#attributes']['class'][] = 'tabledrag-disabled';
      $variables['table']['#attributes']['class'][] = 'js-tabledrag-disabled';

      // We will add the 'is-disabled' CSS class to the disabled table header
      // cells.
      $header_attributes['class'][] = 'is-disabled';
      foreach ($variables['table']['#header'] as &$cell) {
        if (is_array($cell) && isset($cell['data'])) {
          $cell = $cell + ['class' => []];
          $cell['class'][] = 'is-disabled';
        }
        else {
          // We have to modify the structure of this header cell.
          $cell = [
            'data' => $cell,
            'class' => ['is-disabled'],
          ];
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_HOOK() for fieldset.
 */
function starter_theme_preprocess_fieldset(&$variables) {
  $element = $variables['element'];
  $composite_types = ['checkboxes', 'radios'];

  if (!empty($element['#type']) && in_array($element['#type'], $composite_types) && !empty($variables['element']['#children_errors'])) {
    $variables['legend_span']['attributes']->addClass('has-error');
  }

  if (!empty($element['#disabled'])) {
    $variables['legend_span']['attributes']->addClass('is-disabled');

    if (!empty($variables['description']) && !empty($variables['description']['attributes'])) {
      $variables['description']['attributes']->addClass('is-disabled');
    }
  }

  // Remove 'container-inline' class from the main attributes and add a flag
  // instead.
  // @todo remove this after https://www.drupal.org/node/3059593 has been
  //   resolved.
  if (!empty($variables['attributes']['class'])) {
    $container_inline_key = array_search('container-inline', $variables['attributes']['class']);

    if ($container_inline_key !== FALSE) {
      unset($variables['attributes']['class'][$container_inline_key]);
      $variables['inline_items'] = TRUE;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function starter_theme_theme_suggestions_user_alter(&$suggestions, $variables) {
  $suggestions[] = 'user__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function starter_theme_preprocess_field__node__created(&$variables) {
  foreach (Element::children($variables['items']) as $item) {
    unset($variables['items'][$item]['content']['#prefix']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function starter_theme_form_node_preview_form_select_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['backlink']['#options']['attributes']['class'][] = 'button';
  $form['backlink']['#options']['attributes']['class'][] = 'button--small';
  $form['backlink']['#options']['attributes']['class'][] = 'button--primary';
  $form['view_mode']['#attributes']['class'][] = 'form-element--small';
}

/**
 * Implements template_preprocess_text_format_wrapper().
 *
 * @todo Remove when https://www.drupal.org/node/3016343 is fixed.
 */
function starter_theme_preprocess_text_format_wrapper(&$variables) {
  $description_attributes = [];
  if (!empty($variables['attributes']['id'])) {
    $description_attributes['id'] = $variables['attributes']['aria-describedby'] = $variables['attributes']['id'];
    unset($variables['attributes']['id']);
  }
  $variables['description_attributes'] = new Attribute($description_attributes);
}

/**
 * Implements template_preprocess_image().
 *
 * Added loading="lazy" attribute to all img tags.
 */
function starter_theme_preprocess_image(&$variables) {
  $variables['attributes']['loading'] = 'lazy';
}

/**
 * Implements template_preprocess_menu_local_task().
 *
 * Modified visually-hidden class to utility class.
 * Added extra CSS classes.
 */
function starter_theme_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $link += [
    'localized_options' => [],
  ];
  $link_text = $link['title'];

  if (!empty($variables['element']['#active'])) {
    $variables['is_active'] = TRUE;

    // Add text to indicate active tab for non-visual users.
    $active = new FormattableMarkup('<span class="u-visually-hide">@label</span>', ['@label' => t('(active tab)')]);
    $link_text = t('@local-task-title@active', ['@local-task-title' => $link_text, '@active' => $active]);
  }

  $variables['link']['#options']['attributes']['class'][] = 'tabs__link';
  $variables['link']['#options']['attributes']['class'][] = 'js-tabs-link';
  $variables['link']['#title'] = $link_text;

  // Ensure is-active class is set when the tab is active. The generic active
  // link handler applies stricter comparison rules than what is necessary for
  // tabs.
  if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
    $variables['link']['#options']['attributes']['class'][] = 'is-active';
  }
}
