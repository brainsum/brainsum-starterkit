<?php

/**
 * @file
 * Functions to support theming in the BRAINSUM's Drupal 10 starterkit.
 */

use Drupal\node\NodeInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme_registry_alter().
 *
 *   Use our version of toolbar.html.twig template instead of Claro's version.
 */
function brainsum_starterkit_theme_registry_alter(&$theme_registry) {
  $theme_registry['toolbar']['path'] = \Drupal::request()->getBasePath() . '/' .
  \Drupal::service('extension.list.theme')->getPath('brainsum_starterkit') .
  '/templates/navigation';
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 *   Adds body classes if certain regions have content.
 */
function brainsum_starterkit_preprocess_html(&$variables) {
  $path = \Drupal::request()->getPathInfo();
  $path_args = explode('/', $path);
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  // Store theme's path in a variable to access it from any Twig templates.
  $variables['current_theme_path'] = \Drupal::request()->getBasePath() . '/' .
  \Drupal::service('extension.list.theme')->getPath('brainsum_starterkit');

  $variables['path_info']['args'] = FALSE;

  // Generating class name from current path and added to html element.
  if (count($path_args) >= 3) {
    $variables['path_info']['args'] = Html::cleanCssIdentifier(ltrim($path, '/'));
  }

  // Added current ID as class to html element.
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['attributes']['class'][] = 'page-node-' . $node->id();
  }

  // Added a class to html element according to current language.
  $variables['attributes']['class'][] = 'page--language-' . $language;
}

/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
function brainsum_starterkit_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (
    !empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']
  ) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="c-shortcut__wrapper">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];

    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }

  // Unset shortcut link on front page.
  $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  if ($variables['is_front'] === TRUE) {
    unset($variables['title_suffix']['add_or_remove_shortcut']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function brainsum_starterkit_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Startertheme has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'brainsum_starterkit/page.maintenance';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function brainsum_starterkit_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if (
    $variables['teaser'] || !empty(
      $variables['content']['comments']['comment_form']
    )
  ) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function brainsum_starterkit_suggestions_page_alter(
  array &$suggestions,
  array $variables
) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof NodeInterface) {
    $suggestions[] = 'page__' . $node->bundle();
    $suggestions[] = 'page__node_' . $node->bundle();
  }
}

/**
 * Implements hook_preprocess_page() for PAGE document templates.
 */
function brainsum_starterkit_preprocess_page(array &$variables) {
  if ($variables['logged_in'] == TRUE) {
    $variables['#attached']['library'][] = 'brainsum_starterkit/admin.toolbar';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for menu.
 */
function brainsum_starterkit_theme_suggestions_menu_alter(&$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $suggestions[] = 'menu__' . $variables['attributes']['region'];
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function brainsum_starterkit_theme_suggestions_taxonomy_term_alter(
  array &$suggestions,
  array $variables
) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block().
 */
function brainsum_starterkit_theme_suggestions_block_alter(&$suggestions, array $variables) {
  if (!empty($variables['elements']['#id'])) {

    /** @var \Drupal\block\BlockInterface $block */
    $block = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['elements']['#id']);
    if ($block) {

      // Add region-specific block theme suggestions.
      $region = $block
        ->getRegion();

      $suggestions[] = 'block__' . $region;
      $suggestions[] = 'block__' . $region . '__' . 'plugin_id' . '__' . $variables['elements']['#plugin_id'];
      $suggestions[] = 'block__' . $region . '__' . 'id' . '__' . $variables['elements']['#id'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks templates.
 */
function brainsum_starterkit_preprocess_menu_local_tasks(&$variables) {
  foreach (Element::children($variables['primary']) as $key) {
    $variables['primary'][$key]['#level'] = 'primary';
  }
  foreach (Element::children($variables['secondary']) as $key) {
    $variables['secondary'][$key]['#level'] = 'secondary';
  }
}

/**
 * Implements hook_form_alter() for adding classes and placeholder text to the search forms.
 */
function brainsum_starterkit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['actions']['submit']) && (count($form['actions'])) <= 2) {
    $form['actions']['submit']['#attributes']['class'][] = 'c-button--primary';
  }

  switch ($form_id) {
    case 'search_block_form':
      // Add placeholder text to keys input.
      $form['keys']['#attributes']['placeholder'] = t(
        'Search by keyword or phrase.'
      );

      // Add classes to the search form submit input.
      $form['actions']['submit']['#attributes']['class'][] = 'c-search-form__submit';
      break;

    case 'search_form':
      $form['basic']['keys']['#attributes']['placeholder'] = t(
        'Search by keyword or phrase.'
      );
      $form['basic']['submit']['#attributes']['class'][] = 'c-button--primary';
      $form['advanced']['submit']['#attributes']['class'][] = 'c-button--primary';
      break;
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function brainsum_starterkit_preprocess_form_element(&$variables) {
  if (
    in_array($variables['element']['#type'] ?? FALSE, ['checkbox', 'radio'], TRUE)
  ) {
    $variables['attributes']['class'][] = 'c-form-type--boolean';
  }

  if (!empty($variables['description']['attributes'])) {
    $variables['description']['attributes']->addClass('c-form-item__description');
  }

  if ($variables['disabled']) {
    $variables['label']['#attributes']['class'][] = 'is-disabled';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brainsum_starterkit_preprocess_form_element_label(&$variables) {
  $variables['attributes']['class'][] = 'c-form-item__label';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brainsum_starterkit_preprocess_input(&$variables) {
  if (
    !empty($variables['element']['#title_display']) &&
    $variables['element']['#title_display'] === 'attribute' &&
    !empty((string) $variables['element']['#title'])
  ) {
    $variables['attributes']['title'] = (string) $variables['element']['#title'];
  }

  $type_api = $variables['element']['#type'];
  $type_html = $variables['attributes']['type'];
  $text_types_html = [
    'text',
    'email',
    'tel',
    'number',
    'search',
    'password',
    'date',
    'time',
    'file',
    'color',
    'datetime-local',
    'url',
    'month',
    'week',
  ];

  if (in_array($type_html, $text_types_html, TRUE)) {
    $variables['attributes']['class'][] = 'c-form-element';
    $variables['attributes']['class'][] = Html::getClass(
      'c-form-element--type-' . $type_html
    );
    $variables['attributes']['class'][] = Html::getClass(
      'c-form-element--api-' . $type_api
    );

    // Add form label value as placeholder attribute.
    if (isset($variables['element']['#title'])) {
      $variables['attributes']['placeholder'] = (string) $variables['element']['#title'];
    }

    if (!empty($variables['element']['#autocomplete_route_name'])) {
      $variables['autocomplete_message'] = t('Loadingâ€¦');
    }
  }

  if (in_array($type_html, ['checkbox', 'radio'], TRUE)) {
    $variables['attributes']['class'][] = 'c-form-boolean';
    $variables['attributes']['class'][] = Html::getClass(
      'c-form-boolean--type-' . $type_html
    );
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brainsum_starterkit_preprocess_textarea(&$variables) {
  $variables['attributes']['class'][] = 'c-form-element';
  $variables['attributes']['class'][] = 'c-form-element--type-textarea';
  $variables['attributes']['class'][] = 'c-form-element--api-textarea';

  // Add form label value as placeholder attribute.
  if (isset($variables['element']['#title'])) {
    $variables['attributes']['placeholder'] = (string) $variables['element']['#title'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brainsum_starterkit_preprocess_select(&$variables) {
  $variables['attributes']['class'][] = 'c-form-element';
  $variables['attributes']['class'][] = $variables['element']['#multiple'] ?
    'c-form-element--type-select-multiple' :
    'c-form-element--type-select';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brainsum_starterkit_preprocess_checkboxes(&$variables) {
  $variables['attributes']['class'][] = 'c-form-boolean-group';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brainsum_starterkit_preprocess_radios(&$variables) {
  $variables['attributes']['class'][] = 'c-form-boolean-group';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brainsum_starterkit_preprocess_field(&$variables) {
  $rich_field_types = ['text_with_summary', 'text', 'text_long'];

  if (in_array($variables['field_type'], $rich_field_types, TRUE)) {
    $variables['attributes']['class'][] = 'text-content';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brainsum_starterkit_preprocess_field_multiple_value_form(&$variables) {
  // Make disabled available for the template.
  $variables['disabled'] = !empty($variables['element']['#disabled']);

  if (!empty($variables['multiple'])) {
    // Add an additional CSS class for the field label table cell.
    // This repeats the logic of template_preprocess_field_multiple_value_form()
    // without using '#prefix' and '#suffix' for the wrapper element.
    //
    // If the field is multiple, we don't have to check the existence of the
    // table header cell.
    //
    // @see template_preprocess_field_multiple_value_form().
    $header_attributes = [
      'class' => [
        'c-form-item__label',
        'c-form-item__label--multiple-value-form',
      ],
    ];
    if (!empty($variables['element']['#required'])) {
      $header_attributes['class'][] = 'js-form-required';
      $header_attributes['class'][] = 'form-required';
      $header_attributes['class'][] = 'is-required';
    }
    // Using array_key_first() for addressing the first header cell would be
    // more elegant here, but we can rely on the related theme.inc preprocess.
    // @todo change this after https://www.drupal.org/node/3099026 has landed.
    $variables['table']['#header'][0]['data'] = [
      '#type' => 'html_tag',
      '#tag' => 'h4',
      '#value' => $variables['element']['#title'],
      '#attributes' => $header_attributes,
    ];

    if ($variables['disabled']) {
      $variables['table']['#attributes']['class'][] = 'tabledrag-disabled';
      $variables['table']['#attributes']['class'][] = 'js-tabledrag-disabled';

      // We will add the 'is-disabled' CSS class to the disabled table header
      // cells.
      $header_attributes['class'][] = 'is-disabled';
      foreach ($variables['table']['#header'] as &$cell) {
        if (is_array($cell) && isset($cell['data'])) {
          $cell = $cell + ['class' => []];
          $cell['class'][] = 'is-disabled';
        }
        else {
          // We have to modify the structure of this header cell.
          $cell = [
            'data' => $cell,
            'class' => ['is-disabled'],
          ];
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_HOOK() for fieldset.
 */
function brainsum_starterkit_preprocess_fieldset(&$variables) {
  $element = $variables['element'];
  $composite_types = ['checkboxes', 'radios'];

  if (
    !empty($element['#type']) && in_array($element['#type'], $composite_types)
    && !empty($variables['element']['#children_errors'])
  ) {
    $variables['legend_span']['attributes']->addClass('has-error');
  }

  if (!empty($element['#disabled'])) {
    $variables['legend_span']['attributes']->addClass('is-disabled');

    if (
      !empty($variables['description']) &&
      !empty($variables['description']['attributes'])
    ) {
      $variables['description']['attributes']->addClass('is-disabled');
    }
  }

  // Remove 'container-inline' class from the main attributes and add a flag
  // instead.
  // @todo remove this after https://www.drupal.org/node/3059593 has been
  //   resolved.
  if (!empty($variables['attributes']['class'])) {
    $container_inline_key = array_search(
      'container-inline', $variables['attributes']['class']
    );

    if ($container_inline_key !== FALSE) {
      unset($variables['attributes']['class'][$container_inline_key]);
      $variables['inline_items'] = TRUE;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function brainsum_starterkit_theme_suggestions_fieldset_alter(
  array &$suggestions,
  array $variables,
  $hook
) {
  if (isset($variables['element']['#id'])) {
    $id = str_replace("-", "_", $variables['element']['#id']);
    $suggestions[] = $hook . '__' . $id;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function brainsum_starterkit_theme_suggestions_user_alter(&$suggestions, $variables) {
  $suggestions[] = 'user__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brainsum_starterkit_preprocess_field__node__created(&$variables) {
  foreach (Element::children($variables['items']) as $item) {
    unset($variables['items'][$item]['content']['#prefix']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for setting classes.
 */
function brainsum_starterkit_preprocess_filter_caption(&$variables) {
  $variables['classes'] = isset($variables['classes']) && !empty(
    $variables['classes']
  ) ? $variables['classes'] . ' caption' : 'caption';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function brainsum_starterkit_form_comment_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  $comment = $form_state->getFormObject()
    ->getEntity();
  /** @var \Drupal\comment\Entity\Comment $comment */
  if ($comment->hasParentComment()) {
    $form['actions']['submit']['#value'] = t('Reply to comment');
  }
  else {
    $form['actions']['submit']['#value'] = t('Post comment');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function brainsum_starterkit_form_node_preview_form_select_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  $form['backlink']['#options']['attributes']['class'][] = 'c-button';
  $form['backlink']['#options']['attributes']['class'][] = 'c-button--small';
  $form['backlink']['#options']['attributes']['class'][] = 'c-button--icon-back';
  $form['backlink']['#options']['attributes']['class'][] = 'c-button--primary';
  $form['view_mode']['#attributes']['class'][] = 'c-form-element--small';
}

/**
 * Implements template_preprocess_text_format_wrapper().
 *
 * @todo Remove when https://www.drupal.org/node/3016343 is fixed.
 */
function brainsum_starterkit_preprocess_text_format_wrapper(&$variables) {
  $description_attributes = [];
  if (!empty($variables['attributes']['id'])) {
    $description_attributes['id'] = $variables['attributes']['aria-describedby'] = $variables['attributes']['id'];
    unset($variables['attributes']['id']);
  }
  $variables['description_attributes'] = new Attribute($description_attributes);
}

/**
 * Implements hook_preprocess_table().
 */
function brainsum_starterkit_preprocess_table(&$variables) {
  // Mark the whole table and the first cells if rows are draggable.
  if (!empty($variables['rows'])) {
    $draggable_row_found = FALSE;

    foreach ($variables['rows'] as &$row) {
      /** @var \Drupal\Core\Template\Attribute $row['attributes'] */
      if (!empty($row['attributes']) && $row['attributes']->hasClass('draggable')) {
        if (!$draggable_row_found) {
          $variables['attributes']['class'][] = 'draggable-table';
          $draggable_row_found = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function brainsum_starterkit_form_views_exposed_form_alter(&$form) {
  $form['#attributes']['class'][] = 'form--inline';
}

/**
 * Implements template_preprocess_menu_local_task().
 *
 *   Modified visually-hidden class to utility class.
 *   Added extra CSS classes.
 */
function brainsum_starterkit_preprocess_menu_local_task(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'c-tabs__link';
  $variables['link']['#options']['attributes']['class'][] = 'js-tabs-link';

  // Ensure is-active class is set when the tab is active. The generic active
  // link handler applies stricter comparison rules than what is necessary for
  // tabs.
  if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
    $variables['link']['#options']['attributes']['class'][] = 'is-active';
  }

  if (isset($variables['element']['#level'])) {
    $variables['level'] = $variables['element']['#level'];
  }
}
